package com.zhimu.news.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.zhimu.news.dao.NewsCollect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_COLLECT".
*/
public class NewsCollectDao extends AbstractDao<NewsCollect, Long> {

    public static final String TABLENAME = "NEWS_COLLECT";

    /**
     * Properties of entity NewsCollect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Source = new Property(2, String.class, "source", false, "SOURCE");
        public final static Property Desc = new Property(3, String.class, "desc", false, "DESC");
        public final static Property Html = new Property(4, String.class, "html", false, "HTML");
        public final static Property PubDate = new Property(5, String.class, "pubDate", false, "PUB_DATE");
        public final static Property Link = new Property(6, String.class, "link", false, "LINK");
        public final static Property IsImgUrl = new Property(7, Boolean.class, "isImgUrl", false, "IS_IMG_URL");
    };


    public NewsCollectDao(DaoConfig config) {
        super(config);
    }
    
    public NewsCollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"SOURCE\" TEXT," + // 2: source
                "\"DESC\" TEXT," + // 3: desc
                "\"HTML\" TEXT," + // 4: html
                "\"PUB_DATE\" TEXT," + // 5: pubDate
                "\"LINK\" TEXT," + // 6: link
                "\"IS_IMG_URL\" INTEGER);"); // 7: isImgUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_COLLECT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsCollect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(3, source);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(4, desc);
        }
 
        String html = entity.getHtml();
        if (html != null) {
            stmt.bindString(5, html);
        }
 
        String pubDate = entity.getPubDate();
        if (pubDate != null) {
            stmt.bindString(6, pubDate);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        Boolean isImgUrl = entity.getIsImgUrl();
        if (isImgUrl != null) {
            stmt.bindLong(8, isImgUrl ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public NewsCollect readEntity(Cursor cursor, int offset) {
        NewsCollect entity = new NewsCollect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // source
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // html
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pubDate
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // isImgUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsCollect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setSource(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHtml(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPubDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsImgUrl(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(NewsCollect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(NewsCollect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
